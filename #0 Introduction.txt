#0 0 Introduction

이 강의에서는 크로스 플랫폼 ios, 안드로이드 어플을 만들것이다.
리액트와 결합된 자바스크립트 그리고 엑스포의 파워를 이용할것이다.
휴대폰의 geolocation을 보낼것이고 그걸 api에 보낸 다음에, 날씨에 따라, 이쁜 스크린을 덮을 것이다.
아이콘을 가지고 어떻게 작업하는지 배울것이다. 레이아웃 시스템 너의 현재 위치를 갖고 어떻게 작동하는지도 배울것이다.
데이터와 어떻게 통신하는지도 배울것이다.
리액트 네이티브에 대한 경험이 없다면 시작하기좋다.  리액트랑 자바스크립트는 알아야한다.



#0 1 Requirements

이번강의 에 설치할것은 우선 node.js이다.  터미널에 
$node-v
10.0버전 이상이면 가능하다.
$npm-v
6.0 버전 이상이 필요하다.

안드로이드 스튜디오도 깔려있어야한다. 없으면 폰만 있으면 가능하다. expo만 있으면 폰에서도 실행이가능하다.
그리고 expo계정을 만드는 것을 추천한다. 엑스포 계정을 만들고 폰에다가 설치해놓자.
다 한다음에 React native 웹사이트로 와서
$npm install -g  expo-cli



#0 2 Expo vs RN CLI

expo가 뭐지? 리액트 네이티브랑 어떤 관련이 있을까?  
기본적으로 expo는 create-react-app이다. 리액트 네이티브를 위한 설정 파일 같은것들이 없는 방식으로, 모든 것이 셋업 되어있다.
만약에 리엑트 네이티브를 수동으로 작업하고 싶다면, 여기 React Native CLI를 클릭해야한다. CLI(커맨드라인 인터페이스)
React native CLI 방식은 너가 native files들을 더 많이 컨트롤 하고 싶을 때를 위한것이다.
니콜라스는 항상 expo를 통해서 만든다. expo는 모든 native files들을 감추고 모든걸 관리해준다.
expo의 장점은 나의 폰에서 테스트가 가능하다.
expo앱 덕분에 정말 빠르게 가능하다. expo의 유일한 문제점은, native files들을 크게 제어 할 수 없다는 것이다. 기본적으로 expo팀에 달린것이다.
니콜라스는 expo로 작업하면서, 어떤 문제도 없었고, expo는 그가 가장 좋아하는 리액트 네이티브 작업 방식이다.
React Native CLI 로 작업을 해본적이 있었는데 엄청 많은 버그들을 발견했고, expo가 그냥 훨씬 훨씬 더 좋은 경험이었다.
이제 expo가 여기있고 빠르게 로그인해보자. expo는 더 나은 개발자 경험을 제공하고, 너가 앱을 만드는 방식을 처리해준다.
simulation을 처리하고, react native 업데이트도 처리해주고, 문서도 정말 잘 되어 있다. react native에 더 많은 모듈들이 있다.
하지만 expo는 더 많이 지원한다. 예를 들면, payment를 지원하고, printing을 지원하고, sensor, storereviews,barcodescanner 등등을 지원한다.
만약에 내가 이 모든 모듈들을 작동하게 만드려면, react natvie cli 에서는 내가 수동적으로 다 설치해야한다. 
하지만 한계가있다. 
니콜라스가 만난 80%의 리액트 네이티브 개발자들은 native files이 그렇게 많이 필요가 없다고 하는것을 느꼈다. 대부분의 큰회사들은
native file이 필요할것이다.근데 일반적으로 expo면 충분하도고 생각한다. expo로 작업하면서 절대 문제가 생겼던 적은 없었다 또한 expo가 building process를 처리해줄것이다.



#0 3 Creating the Project

엑스포로 프로젝트를 시작하려면, Documents로 가서 아니면 니가 원하는 경로로 가서, expo init[프로젝트명] 실행해 
우리는
$ expo init fokin-weather
이렇게하면 두가지를 물어볼것이다.
blacnk(TypeScript) or Tabs or bare-minimum. 이건 왜냐면 expo가 자동 생성 할수 있기 때문이다. 이번에는 그냥 blank를 선택 할것이다. zero 부터 시작할것이다.
만약에 예를 들어 스크린들을 이미 가지고 있는 앱을 가졌을 때 그건 탭들을 가지게 될것이고, 그럼 탭을 선택하고,  만약에 내가 경험자라면
 TypeScript를 선택하고, 우리는 초보자니까. blank를 선택하자. 그러면 생성이 완료될것이다.
그리고 프로젝트를 한번 살펴보도록 하자.
package.json은 우리가 무엇인지 알고, babel.config 이건 건드리지 말자 그리고 app.json 이것이 configuration 파일인데 그러니까 expo가 읽게될것이다. 
이런게 있을 것이다. 
platforms: ios, android ,web			//여기서 web은 베타 서포트이고
version,orientation,splash screen.. ios는 태블릿을 지원하고
내가 할수 있는 훨씬 더 많은 설정들이 있다.  근데 이 파일을 expo가 읽는 것이고
app.js - 기본적인 리액트 컴포넌트 인데 살짝 다르다.

expo 어플리케이션을 시작해보자. 시작을 위해서 npm start 또는 yarn start
자동으로 export DEV tools를 오픈 해줄 것이다. 여기 보듯이 tunnel, Metro bundler을 자동으로 시작할 것이다.
여기보면 , QR코드가 있다 안드로이드폰이 QR코드를 스캔하기 때문이다.
Expo 애플리케이션이 폰에서, 프로젝트를 열고, 넌 앱을 폰에서 테스트 해볼수 있다.
 
ios에는 QR코드가 없다 그래서 뭘해야하냐면 expo앱으로 너의 ios앱으로 로그인한 후에
$expo login
username과 password를 요청할것이다.  
끝
expo 덕분에, 우리는 expo 프로젝트를 니 컴퓨터에서 볼수 있고, ios애플리케이션을 너의 컴퓨터에서, 폰에서 오픈할수있다.
만약에 너의 컴퓨터에서 테스트 안할거라면 Run on iOS simulator 또는 Run on Android device/emulator를 클릭하면 된다.


#0 4 Getting to know Expo

Run on Android device/emulator을 클릭해서 시뮬레이터가 시작했다. 보다시피 애플리케이션을 인스톨하고, 자바스크립트 번들을 열고있다.
처음에 뜨는 이미지 여기 이미지가 splash screen인데, asset 폴더안에 splash.png라고 파일이있다.
expo는 엄청 멋진 거라서, expo optimized라는 명령어를 가지고있다. 앱스토어에 맞게 이미지들을 압축 시켜줄것이다. 우리의 경우에는 아직 이미지들이 압축 안되어있다.
우리는 또 metro bundler도 있다. 리액트 네이티브를 작동하게 만들어 주는것이고, 디바이스의 로그들도 가지고있다.
하지만 가끔 expo connection에 문제가 좀 있다. 그러니까 모든 시도하는 기기들이 같은 wifi에 연결되어있는지 확실히 해야한다.
컴퓨터랑 폰이 같은 wifi 연결을 가지도록 해야한다. 그래야 고생을 덜 할것이다. 이제 우리는 expo가 어떻게 동작하는지 알았다.'
이제 expo의 좋은 점을 보자.

1. live reloading
2. hot reloading

이것 두가지들이 많은 앱개발자들이 사랑하는 것이다. 여기보면 text가 있다. 이게 당췌 뭔말인지는 나중에 설명 해줄테니까 걱정하지말자. 그리고 이렇게 입력할것이다. Hello
저장하면, 저장후에 바로 즉시 expo가 전체 애플리케이션을 reload할것이다. splash 스크린이 잠깐보이고 애플리케이션이 나타날것이다.
이것을 live reload라고 한다. 내가 저장하면 자동으로 리프레쉬되고 ,변경된것을 확인될수 있다. 
그리고 수동으로 하고싶다면 시뮬레이터로가서 command or ctrl +R을 누르자. 
이제 폰에서 개발자 메뉴에 접근하고 싶다면, 폰을 흔들어야 한다. 폰을 흔들면, 개발자 메뉴가 열릴것이다. 한번만 흔들자 시뮬레이터에서는 ctrl+D이다.

그리고 Debug remote.js라는것이 있다. 이건 어플리케이션을 조금 느리게 만들수도 있다. 왜냐면 이건 기본적으로 애플리케이션 디버그 하는걸도와주기때문이다.
Google developer tools를 이용해서 앱으로그를 볼수도있다. 근데 크롬 안에서만 보일것이다. 앱을 조금 무겁게 만들어준다.
그래서 앱이 매우 빠르게 실행 되진 않을것이다. 이건 필요한 경우에만 쓸것이다. 예를 들면, 네트워크 요청이라든가 콘솔로그를 확인할때 크롬으로 작업하고 싶을때, 근데 니콜라스는 그렇게 많이 사용하지는 않는다.
니콜라스는 여기 콘솔 디벨로퍼 로그면 충분하다고 한다. 리액트 네이티브 디버거는 오직 뭐가 어떻게 돌아가는지 보기원해서 만 쓴다 지금은 끌것이다. 앱이 느려지기 때문이다.
이것들이 기본적으로 expo가 동작하는 방식이고, 몇개의 명령어가 있는데 이과정에서는 사용하지 않을텐데 알아두면 좋을 것은 expo가 웹지원을 위해서 실험하고 있어서
Eject는  expo에서 eject하기를 원할때 그러니까, 전에 말했듯이, expo가 너 대신 모든 파일을 다루는데, xcode, android studio 만약 내가 eject를 원하고, "잘가 ~expo" 그리고 내가 파일을 직접 다루고싶다면
npm run eject를 실행하면 모든 configuration파일들을 볼수있을것이다. 대신에 eject를 expo에서 실행하게된다면, 다시 되돌릴 수없다. 너가 업데이트랑 이런것들 혼자서 처리해야한다. expo안에 있으면, 모든것들이 너대신 자동으로 업데이트 해줄것이다.

다음 강의에서는 리액트 네이티브에 대해서 이야기해보자. 차이점들- 아이폰(리액트 네이티브) vs 안드로이드 vs 웹사이트



#0 5 How does React Native Work?

아마 궁금 할것이다. 도대체 이것이 뭐고, 어떻게 리액트가 작동을 하는지 ios랑 android에서 네이티브처럼. 모바일 앱을 만드는 3가지 다른 방법들을 이야기해보자
1. 완전 native: Swift나 object-c 로 ios앱을 만드는것, Java 나 코틀린으로 만드는 안드로이드앱
프로그래밍 언어도 다르고 매우다르다. 하나는 Xcode 하나는 Android Studio 이게 네이티브의 방식이다.
2. 앱기반 웹뷰
내가 정말 간단한 매우매우 심플한 앱을 만들고, 예를 들면 Cordova or PhonGap을 이용해서 그리고 그안에 그냥 HTML,CSS를 넣는것이다.
그리니까 이건 앱 안에서 작동하는 웹사이트 같은것이다. 하이브리드, 웹 뷰 방식이다
껍데기가있고 껍데기는 Cordova 나 PhoneGap에 의해 만들어진 native이고 그게 앱스토어로 가는것이고, 너는 모든것을 다운로드 해야한다.
근데 사용자가 내 앱을 오픈할때, 내가 보여주는 것들은 HTML,CSS,JAVASCRIPT이다 마치 그게 웹사이트인것처럼. 이 접근은 회사들 그러니까 native쪽에 많은 예산이 없는 회사들이 사용한다.
그치만, 이미 훌륭한 반응형 웹사이트를 가지고 있고, 몇개의 네이티브 기능들이 필요할때 알림푸쉬 같은것들. 그래서 그들이 하는 것은 그냥 전체 웹사이트를 앱안에다가 넣는 것이다.
그래서 유저가 앱을 오픈했을 때,  반응형 웹사이트를 보는 것이다. 아마존 앱이 그렇게 만들어 졌다고 알고있는데 진짜 잘 만들었다. 근데 native는 아니다.
그래서 네이티브 특징들을 실제 어플리케이션에서 많이 얻지는 못할 것이다.

리액트네이티브의 방식은 기본적으로 이런것이다. 자바스크립트를 웹사이트에서 실행하고, 구글 크롬, 사파리, iOS,Android 두랃 자바스크립트를 실행할 수 있다. 자바스크립트 엔진을 가지고 있기 때문이다.
자바스크립트를 웹사이트에서 실행하고 구글크롬,사파리,iOS, Android 그니까 리액트 네이티브가 하는 일은, 자바스크립트를 이용해서 ios또는 Android의 네이티브 엔진에게 (자바스크립트를 이용한) 메세지를 보내는 것이다.
연결을 이어주는 브릿지 같은 것이다. 지금 보는게 리액트 컴포넌트이다. 근데 내가 여기서 볼 수없는것, 아니면 여기서 보고 있는 것은 뷰나 텍스트 라고 불리는 것들을 임포트 한것들이다.
이것이 브릿지이다. 자바스크립트와 안드로이드, ios의 네이티브 텍스트, 뷰를 이어주는 내가 할일은, 난 컴포넌트를 사용하고, 그것은 자바스크립트이다. 근데 컴포넌트 안에 브릿지가 있다.
누군가 작성해놓은 Swift code나 Java code로 iphone,android가 이 컴포넌트를 이해하도록 만들려고 그래서 항상 브릿지가 있다. 누군가가 있다. 페이스북의 경우, Js와 ios,Android 사이에서 서로를 이해하기 위한 사이의 브릿지를 만들어.
그래서 사람들이 리액트 네이티브를 좋아하기도 하지만 싫어하는 이유기도하다. 리액트 네이티브는 네이티브기는 하지. 그말인 즉슨, 실제로 아이폰의 코어로 가고 안드로이드 폰의 코어로 가지만, 항상 브릿지가 있다. 그래서 항상 브릿지가 필요하게 된다.
자바스크립트와 폰 사이의 커뮤니케이션을 위해서 그래서 그게 느린 성능을 유발할 수도 있다. 왜냐면 브릿지로 많은 데이터를 보내면, 브릿지에 교통체증처럼 부하가 걸리니까. 그래서 리액트 네이티브는 애플리케이션 만들기에는 퍼펙트한데 컨텐츠만 다루는것들 예를 들면
인스타그램:사진을가져오고 좋아요 누르고,코멘트 작성하고 코멘트 삭제하고, 프로필 업뎃하고, 이런것 들 또다른 예로는 데이팅 앱같은 것을 리액트 네이티브로 만드는것은 매우 쉽다. 근데 만약에 3D 비디오게임같은것들을 만든다면, 리액트 네이티브가 최선은 아닐것이다.
왜냐면 코드를 최적화 하는데 많이 시간을 써야 할테니까 브릿지가 느려지지 않도록 비디오 게임코드를 작성하거나, 3D증강 현실 앱을 작성하길 원하는 경우에는 폰카메라나 뭐 그런것들을 가지고 말이다. 리액트 네이티브가 좋은 선택은 아닐것이다. 왜냐면 걔는 그런것들을 목적으로 만들어진것이 아니기 때문이다.
자바스크립트와 폰의 코드 사이의 커뮤니케이션을 쉽게하려고 만들어 진것이다. 그게 다다 리액트네이티브가 작동하는방식이다.

이제 리액트네이티브가 어떻게 작동하는지 아니까, 컴포넌트에 대해서 얘기 해보자.

export default function App() {
  return (
    <View style={styles.container}>
      <Text>Hello!!!</Text>
    </View>
  );
}

리액트네이티브 or 안드로이드 ios에서 모든게 view다 view는 <div> 같은거라고 생각하자.
전부다 view고 view안에 모든것을 집어넣어야한다. 리액트 네이티브의 경우에는 다른 규칙들이 있다. 예를 들면, 웹사이트에서는 <span>을 사용한다. text를 넣을때
하지만 리액트 네이티브에서는 span을 안쓴다. 모든 text는 <Text>여기</Text>로 들어가야한다.

리액트 네이티브에서는 <div>, <span>을 사용하지 않고 우리는 <View>와 <Text>를 사용할것이다. 리액트 네이티브에는 이런 규칙들이 있었다.
이런 룰이 존재하는 이유는, 아까 말한 브릿지 때문이다. 지금여기보듯이 우리는

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});

여기를 작업할텐데 CSS처럼 보인다. 왜냐먄 이건 리액트 네이티브가 CSS엔진을 구현했기 때문이다, 내가 flexbox 같은 것들을 사용할수 있다는 뜻이다.
justifyContent,backgroundColor.. 차이점은, 이런식으로 써야한다. 자바스크립트 오브잭트 처럼 근데 컨셉은 같다. 몇가지 예외 경우가 있고 작동 하지 않을텐데. 근데 괜찮다.
이걸 StyleSheet API라고 부르는데, 왜냐면 stylesheet를 생성할 수있게 해주니까, 이것은 진짜 쉽다. 따로 설명할게 별로 없다.
Container가 있고, (화면 참고) 전체 스크린을 가지는 flex박스, backgroundColor"red"를 만들고, alignItems"center로 바꾸고,새로고침을 해보면

(니콜라스의 화면에서) 에러가 발생했는데 
Error: red ECONNRESET
 connection이 리셋됬기 때문이다. 이게 매우 종종 발생할텐데, 여러번 만나게 될것이다. 
그러면 expo를 kill하고 
$npm run start
하면 해결된다
이게 자주 발생하지는 않는데.. 근데 그러면 서버를 리셋하고 나서 자바스크립트 번들 다시 빌드 되면, 그럼 다시 제대로 나올것이다. 여기 에러 메시지는 걱정하지말자 작동할때 까지 리로드를 클릭하면된다.
예를들어


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    color:"white",		//여기에 color:"white" 를 줬따.
    fontSize:12,		//fontsize를 줬다.
    justifyContent: "center",
  },
});
이러면 작동할거라고 생각해? 보다시피 안된다. 모든게 웹사이트의 css 처럼 작동하지 않는다. 만약 이게 웹사이트 였으면,텍스트는 부모의 칼라를 얻었을것이다. 이건 웹사이트가 아니고, 리액트 네이티브기 때문에 안된다.
그래서, 이런 규칙들을 좀 신경 써줘야 한다. 내가 만약에 폰트 size를 여기다 넣는다면 어떻게 될까? 작동할까? 정답은 아니다 이다. 예를 들어 여기 text에 스타일을 적용하고 싶다면,

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Hello!!!</Text>		//이렇게 style={styles.text}로 값을 주고
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "red",
    alignItems: "center",
    color: "white",
    justifyContent: "center",
  },
  text: {						//text:{} 안에다가 값을 써넣으면된다.
    color: "white",
    width: "100%",
  },
});
에러메시지가 좋은점이 정말잘 나타낸다. 넌이거 할수없고 넌 할수없다를 확실하게 나타내준다.
이제 리액트 네이티브가 어떻게 작동하는지 이해했다. 우리 앱 만들기를 시작해보자!



